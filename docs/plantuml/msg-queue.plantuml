@startuml msg-queue

participant MessageListView as MV
participant SendQueue as SQ
participant UploadQueue as UQ
participant MessageModdule as MM
participant IMLib

MM <--: 发送消息（批量 or 单独）
loop 非阻塞循环
  MM --> MM: createTransactionId()
  note left: 生成唯一事务 ID，用以消息映射
  alt 需要存储的消息
    MM --> MM: insertMessage
    note left: 插入内存态消息列表
    alt Electron
      MM --> IMLib: insertMessage
    end
  end
  alt 需要上传资源的消息
    MM --> UQ: push(msg)
    note right: 推入上传队列
  else
    MM --> SQ: push(msg)
    note right: 推入发送队列
  end
end

MM --> MV: Emit(ADD_MESSAGE, [msg, msg2, ...])
note left: 批量更新显示列表

== 上传进度通知 ==

... 0 表示开始上传，100 表示上传完成，-1 表示上传失败 ...

UQ --> MV: Emit(UPLOAD_PROGRESS, transactionId, progress)
note left: 更新显示列表
UQ --> MM: Emit(UPLOAD_PROGRESS, transactionId, progress)
note right: 更新内存态消息列表
alt progress === 100
  MM --> SQ: push(msg)
end

== 发送队列事件 ==

loop 从队列按先进先出原则取出待发送消息, 1s 内最多发出 5 条消息, 规避服务限频
  SQ --> IMLib: code = await sendMessage(msg)
  note left: 发送消息
  SQ --> MV: Emit(SEND_MESSAGE, transactionId, code)
  note left: 更新显示列表
  SQ --> MM: Emit(SEND_MESSAGE, transactionId, code)
  note right: 更新内存态消息列表
end

@enduml