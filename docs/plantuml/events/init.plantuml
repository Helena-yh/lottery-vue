@startuml init

participant App
box IMKit
  participant RCKitApplication
  participant RCKitContext
  participant RCKitStore
  participant RCKitModule
  participant RCKitProvider
end box
participant IMLib
box DOM
  participant "<rc-xxx-provider>" as Provider
  participant "<rc-xxx>" as Comoponent
end box

== 初始化 ==

App --> IMLib: IMLib 初始化
App --> RCKitApplication: IMKit 初始化
create RCKitContext
RCKitApplication -> RCKitContext: ctx = new(logger, pluginCtx);
RCKitContext -> RCKitContext: 监听 IM 事件
create RCKitStore
RCKitContext -> RCKitStore: store = new(logger)
create RCKitModule
RCKitApplication -> RCKitModule: xmodule = new(ctx)
create RCKitProvider
RCKitApplication -> RCKitProvider: xprovider = new(ctx)

== 监听 IMLib & IMkit 事件 ==

App --> IMLib: addEventListener
App --> RCKitApplication: addEventListener

== 定义自定义组件 ==

App --> RCKitApplication: defineComponent('rc-xxx', xxx)
RCKitApplication -> RCKitApplication: 存储组件定义

== 注册组件 ==

App --> RCKitApplication: registerCustomElements()
loop 遍历 Component 组件定义
  alt 业务自定义组件 then
    create Comoponent
    RCKitApplication -> Comoponent: 使用业务自定义组件
  else
    create Comoponent
    RCKitApplication -> Comoponent: 使用默认组件
  end
end

loop 遍历注册 provider 组件
  RCKitApplication -> RCKitProvider: defineComponent
  create Provider
  RCKitProvider -> Provider: 使用 provider 组件
end

@enduml